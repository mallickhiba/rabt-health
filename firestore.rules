/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for patient data and related records.
 * All data is nested under /users/{userId}, ensuring that each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}/patients/{patientId}: Stores patient information. The userId corresponds to the authenticated user's UID.
 * - /users/{userId}/patients/{patientId}/transcripts/{transcriptId}: Stores transcripts for a specific patient.
 * - /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}: Stores SOAP notes for a specific patient.
 * - /users/{userId}/patients/{patientId}/instructions/{instructionId}: Stores instructions sent to a specific patient.
 *
 * Key Security Decisions:
 * - Enforces path-based ownership for all documents and subcollections.
 * - Read and write access are restricted to the owner (the user whose UID matches the {userId} in the path).
 * - Listing operations are allowed for owners within their user-scoped subcollections.
 * - Data consistency between the path and internal document fields is enforced on create and update.
 *
 * Denormalization for Authorization:
 * - The data structure inherently denormalizes authorization data into the path itself, eliminating the need for `get()` calls to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Enforces path-based ownership for patient data.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) User 'user123' can create a patient document under /users/user123/patients/patient456 if request.auth.uid == 'user123' and request.resource.data.id == 'user123'.
     * @allow (get, list) User 'user123' can read patient documents under /users/user123/patients/patient456 if request.auth.uid == 'user123'.
     * @allow (update, delete) User 'user123' can update/delete patient documents under /users/user123/patients/patient456 if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a patient document under /users/user123/patients/patient456 because request.auth.uid != 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete patient documents under /users/user123/patients/patient456 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for transcripts.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) User 'user123' can create a transcript under /users/user123/patients/patient456/transcripts/transcript789 if request.auth.uid == 'user123'.
     * @allow (get, list) User 'user123' can read transcripts under /users/user123/patients/patient456/transcripts/transcript789 if request.auth.uid == 'user123'.
     * @allow (update, delete) User 'user123' can update/delete transcripts under /users/user123/patients/patient456/transcripts/transcript789 if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a transcript under /users/user123/patients/patient456/transcripts/transcript789 because request.auth.uid != 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete transcripts under /users/user123/patients/patient456/transcripts/transcript789 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for SOAP notes.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) User 'user123' can create a SOAP note under /users/user123/patients/patient456/soap_notes/soapnote789 if request.auth.uid == 'user123'.
     * @allow (get, list) User 'user123' can read SOAP notes under /users/user123/patients/patient456/soap_notes/soapnote789 if request.auth.uid == 'user123'.
     * @allow (update, delete) User 'user123' can update/delete SOAP notes under /users/user123/patients/patient456/soap_notes/soapnote789 if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a SOAP note under /users/user123/patients/patient456/soap_notes/soapnote789 because request.auth.uid != 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete SOAP notes under /users/user123/patients/patient456/soap_notes/soapnote789 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for instructions.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) User 'user123' can create an instruction under /users/user123/patients/patient456/instructions/instruction789 if request.auth.uid == 'user123'.
     * @allow (get, list) User 'user123' can read instructions under /users/user123/patients/patient456/instructions/instruction789 if request.auth.uid == 'user123'.
     * @allow (update, delete) User 'user123' can update/delete instructions under /users/user123/patients/patient456/instructions/instruction789 if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create an instruction under /users/user123/patients/patient456/instructions/instruction789 because request.auth.uid != 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete instructions under /users/user123/patients/patient456/instructions/instruction789 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}