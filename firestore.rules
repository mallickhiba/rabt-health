/**
 * @fileoverview Firestore Security Rules for Patient Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for patient data and associated records (transcripts, SOAP notes, instructions).
 * Only the authenticated user who "owns" a patient can read or modify the patient's data.
 *
 * Data Structure:
 * All patient data is nested under /users/{userId}, where {userId} must match the authenticated user's UID.
 * Subcollections under each patient (e.g., transcripts, SOAP notes) inherit the same ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is limited to relational integrity (e.g., patientId in subcollections must match the parent patientId).
 *
 * Denormalization for Authorization:
 *  - Ownership is enforced through path-based rules, eliminating the need for `get()` calls to determine ownership.
 *
 * Structural Segregation:
 * Patient data and associated records are stored in separate subcollections under each user, ensuring data isolation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and that the resource exists.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for /users/{userId}/patients/{patientId} collection.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) - User A with UID "user_a" can create a new patient document under /users/user_a/patients/patient_123.
     * @deny (create) - User B with UID "user_b" cannot create a patient document under /users/user_a/patients/patient_123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/patients/{patientId}/transcripts/{transcriptId} collection.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) - User A with UID "user_a" can create a new transcript document under /users/user_a/patients/patient_123/transcripts/transcript_456.
     * @deny (create) - User B with UID "user_b" cannot create a transcript document under /users/user_a/patients/patient_123/transcripts/transcript_456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} collection.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) - User A with UID "user_a" can create a new SOAP note document under /users/user_a/patients/patient_123/soap_notes/soap_note_456.
     * @deny (create) - User B with UID "user_b" cannot create a SOAP note document under /users/user_a/patients/patient_123/soap_notes/soap_note_456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/patients/{patientId}/instructions/{instructionId} collection.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) - User A with UID "user_a" can create a new instruction document under /users/user_a/patients/patient_123/instructions/instruction_456.
     * @deny (create) - User B with UID "user_b" cannot create an instruction document under /users/user_a/patients/patient_123/instructions/instruction_456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection group queries for soap_notes across all patients
     * Requires userId field in documents for security
     */
    match /{path=**}/soap_notes/{soapNoteId} {
      allow get: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Collection group queries for instructions across all patients
     * Requires userId field in documents for security
     */
    match /{path=**}/instructions/{instructionId} {
      allow get: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}