/**
 * @fileOverview Firestore Security Rules for Patient Management App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access data associated with their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which represents the authenticated user.
 * - /users/{userId}/patients/{patientId}: Stores patient information owned by the user.
 * - /users/{userId}/patients/{patientId}/transcripts/{transcriptId}: Stores transcripts associated with a specific patient.
 * - /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}: Stores SOAP notes for a specific patient.
 * - /users/{userId}/patients/{patientId}/instructions/{instructionId}: Stores instructions sent to a specific patient.
 *
 * Key Security Decisions:
 * - Users can only read, write, update, or delete data under their own user ID.
 * - Listing of patients and associated data is allowed only for the owner.
 * - Validation is limited to relational integrity (e.g., patientId in subcollections must match the path).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for patient documents under a user's patients collection.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) User 'user123' can create a patient document with their userId.
     * @allow (get, list) User 'user123' can read/list their own patient documents.
     * @allow (update, delete) User 'user123' can update/delete their own patient documents.
     * @deny (create) User 'user456' cannot create a patient document under 'user123''s path.
     * @deny (get, list) User 'user456' cannot read/list 'user123''s patient documents.
     * @deny (update, delete) User 'user456' cannot update/delete 'user123''s patient documents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/patients/{patientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == patientId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transcript documents under a patient's transcripts collection.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) User 'user123' can create a transcript for their patient if the patientId matches.
     * @allow (get, list) User 'user123' can read/list transcripts for their own patient.
     * @allow (update, delete) User 'user123' can update/delete transcripts for their own patient.
     * @deny (create) User 'user456' cannot create a transcript under 'user123''s patient.
     * @deny (get, list) User 'user456' cannot read/list transcripts of 'user123''s patient.
     * @deny (update, delete) User 'user456' cannot update/delete transcripts of 'user123''s patient.
     * @principle Enforces document ownership and validates the patientId relationship.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for SOAP note documents under a patient's soap_notes collection.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) User 'user123' can create a SOAP note for their patient if the patientId matches.
     * @allow (get, list) User 'user123' can read/list SOAP notes for their own patient.
     * @allow (update, delete) User 'user123' can update/delete SOAP notes for their own patient.
     * @deny (create) User 'user456' cannot create a SOAP note under 'user123''s patient.
     * @deny (get, list) User 'user456' cannot read/list SOAP notes of 'user123''s patient.
     * @deny (update, delete) User 'user456' cannot update/delete SOAP notes of 'user123''s patient.
     * @principle Enforces document ownership and validates the patientId relationship.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for instruction documents under a patient's instructions collection.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) User 'user123' can create an instruction for their patient if the patientId matches.
     * @allow (get, list) User 'user123' can read/list instructions for their own patient.
     * @allow (update, delete) User 'user123' can update/delete instructions for their own patient.
     * @deny (create) User 'user456' cannot create an instruction under 'user123''s patient.
     * @deny (get, list) User 'user456' cannot read/list instructions of 'user123''s patient.
     * @deny (update, delete) User 'user456' cannot update/delete instructions of 'user123''s patient.
     * @principle Enforces document ownership and validates the patientId relationship.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}