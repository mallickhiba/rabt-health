/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for patient data and associated subcollections.
 *
 * Data Structure:
 * All patient data and related records (transcripts, SOAP notes, instructions) are nested under a user-specific path: /users/{userId}/patients/{patientId}/...
 * - `/users/{userId}/patients/{patientId}`: Stores patient information.
 * - `/users/{userId}/patients/{patientId}/transcripts/{transcriptId}`: Stores patient transcripts.
 * - `/users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}`: Stores SOAP notes for patients.
 * - `/users/{userId}/patients/{patientId}/instructions/{instructionId}`: Stores instructions sent to patients.
 *
 * Key Security Decisions:
 * - User ownership is enforced based on the `userId` path segment matching the authenticated user's UID.
 * - All subcollections inherit the ownership of the parent patient document.
 * - List operations are allowed only for the owner of the data.
 * - Validation of data types and schema is omitted for rapid prototyping, except for fields critical for authorization (userId, patientId) and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for patient documents.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can create a patient document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId if the document.id matches 'somePatientId'.
     * @allow (update) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can update a patient document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId.
     * @allow (delete) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can delete a patient document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId.
     * @deny (create) - User 'attackerId' cannot create a patient document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId.
     * @principle Enforces document ownership for writes, path-based ownership for reads and writes.
     */
    match /users/{userId}/patients/{patientId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document based on the userId path segment
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == patientId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transcript documents.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can create a transcript document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/transcripts/someTranscriptId.
     * @allow (update) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can update a transcript document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/transcripts/someTranscriptId.
     * @allow (delete) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can delete a transcript document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/transcripts/someTranscriptId.
     * @deny (create) - User 'attackerId' cannot create a transcript document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/transcripts/someTranscriptId.
     * @principle Enforces document ownership for writes, path-based ownership for reads and writes, and validates relational integrity.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document based on the userId path segment
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && request.resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for SOAP note documents.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can create a SOAP note document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/soap_notes/someSoapNoteId.
     * @allow (update) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can update a SOAP note document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/soap_notes/someSoapNoteId.
     * @allow (delete) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can delete a SOAP note document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/soap_notes/someSoapNoteId.
     * @deny (create) - User 'attackerId' cannot create a SOAP note document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/soap_notes/someSoapNoteId.
     * @principle Enforces document ownership for writes, path-based ownership for reads and writes, and validates relational integrity.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document based on the userId path segment
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && request.resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for instruction documents.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can create an instruction document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/instructions/someInstructionId.
     * @allow (update) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can update an instruction document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/instructions/someInstructionId.
     * @allow (delete) - User '1ecklvOM9dVdsKi1bKGlBUmjhUU2' can delete an instruction document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/instructions/someInstructionId.
     * @deny (create) - User 'attackerId' cannot create an instruction document under /users/1ecklvOM9dVdsKi1bKGlBUmjhUU2/patients/somePatientId/instructions/someInstructionId.
     * @principle Enforces document ownership for writes, path-based ownership for reads and writes, and validates relational integrity.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document based on the userId path segment
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.patientId == patientId;
      allow update: if isExistingOwner(userId) && request.resource.data.patientId == patientId;
      allow delete: if isExistingOwner(userId);
    }
  }
}