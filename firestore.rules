rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId);
    }

    /**
     * @description Enforces that on creation, the ID in the data matches the document ID in the path.
     */
    function isValidNewOwner(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the userId cannot be changed after creation (update operations).
     */
    function isOwnerIdImmutable(userId) {
        return request.resource.data.id == resource.data.id;
    }


    /**
     * @description Rules for the /users/{userId}/patients/{patientId} collection.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) - A user can create a patient document if the userId matches their auth.uid.
     * @allow (get, list) - A user can read their own patient documents.
     * @allow (update, delete) - A user can update or delete their own patient documents.
     * @deny (create) - A user cannot create a patient document for another user.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/patients/{patientId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/patients/{patientId}/transcripts/{transcriptId} collection.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) - A user can create a transcript if the userId matches their auth.uid and patientId matches.
     * @allow (get, list) - A user can read their own transcripts.
     * @allow (update, delete) - A user can update or delete their own transcripts.
     * @deny (create) - A user cannot create a transcript for another user or patient.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} collection.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) - A user can create a SOAP note if the userId matches their auth.uid and patientId matches.
     * @allow (get, list) - A user can read their own SOAP notes.
     * @allow (update, delete) - A user can update or delete their own SOAP notes.
     * @deny (create) - A user cannot create a SOAP note for another user or patient.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/patients/{patientId}/instructions/{instructionId} collection.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) - A user can create an instruction if the userId matches their auth.uid and patientId matches.
     * @allow (get, list) - A user can read their own instructions.
     * @allow (update, delete) - A user can update or delete their own instructions.
     * @deny (create) - A user cannot create an instruction for another user or patient.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}