rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for patient documents.
     * @path /users/{userId}/patients/{patientId}
     * @allow (create) - User A can create a patient document if the userId matches their auth UID.
     * @allow (get, list, update, delete) - User A can read, update, or delete a patient document if the userId matches their auth UID.
     * @deny (create, update, delete) - User B cannot create, update, or delete User A's patient document because the userId does not match User B's auth UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/patients/{patientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transcript documents.
     * @path /users/{userId}/patients/{patientId}/transcripts/{transcriptId}
     * @allow (create) - User A can create a transcript document if the userId matches their auth UID and patientId matches the path.
     * @allow (get, list, update, delete) - User A can read, update, or delete a transcript document if the userId matches their auth UID and patientId matches the path.
     * @deny (create, update, delete) - User B cannot create, update, or delete User A's transcript document because the userId does not match User B's auth UID, or patientId does not match the path.
     * @principle Enforces document ownership and validates patientId for relational integrity.
     */
    match /users/{userId}/patients/{patientId}/transcripts/{transcriptId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for SOAP note documents.
     * @path /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId}
     * @allow (create) - User A can create a SOAP note document if the userId matches their auth UID and patientId matches the path.
     * @allow (get, list, update, delete) - User A can read, update, or delete a SOAP note document if the userId matches their auth UID and patientId matches the path.
     * @deny (create, update, delete) - User B cannot create, update, or delete User A's SOAP note document because the userId does not match User B's auth UID, or patientId does not match the path.
     * @principle Enforces document ownership and validates patientId for relational integrity.
     */
    match /users/{userId}/patients/{patientId}/soap_notes/{soapNoteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for instruction documents.
     * @path /users/{userId}/patients/{patientId}/instructions/{instructionId}
     * @allow (create) - User A can create an instruction document if the userId matches their auth UID and patientId matches the path.
     * @allow (get, list, update, delete) - User A can read, update, or delete an instruction document if the userId matches their auth UID and patientId matches the path.
     * @deny (create, update, delete) - User B cannot create, update, or delete User A's instruction document because the userId does not match User B's auth UID, or patientId does not match the path.
     * @principle Enforces document ownership and validates patientId for relational integrity.
     */
    match /users/{userId}/patients/{patientId}/instructions/{instructionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}